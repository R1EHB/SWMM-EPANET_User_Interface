# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _output
else:
    import _output

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SMO_US = _output.SMO_US
SMO_SI = _output.SMO_SI
SMO_CFS = _output.SMO_CFS
SMO_GPM = _output.SMO_GPM
SMO_MGD = _output.SMO_MGD
SMO_CMS = _output.SMO_CMS
SMO_LPS = _output.SMO_LPS
SMO_MLD = _output.SMO_MLD
SMO_MG = _output.SMO_MG
SMO_UG = _output.SMO_UG
SMO_COUNT = _output.SMO_COUNT
SMO_NONE = _output.SMO_NONE
SMO_subcatch = _output.SMO_subcatch
SMO_node = _output.SMO_node
SMO_link = _output.SMO_link
SMO_sys = _output.SMO_sys
SMO_pollut = _output.SMO_pollut
SMO_reportStep = _output.SMO_reportStep
SMO_numPeriods = _output.SMO_numPeriods
SMO_rainfall_subcatch = _output.SMO_rainfall_subcatch
SMO_snow_depth_subcatch = _output.SMO_snow_depth_subcatch
SMO_evap_loss = _output.SMO_evap_loss
SMO_infil_loss = _output.SMO_infil_loss
SMO_runoff_rate = _output.SMO_runoff_rate
SMO_gwoutflow_rate = _output.SMO_gwoutflow_rate
SMO_gwtable_elev = _output.SMO_gwtable_elev
SMO_soil_moisture = _output.SMO_soil_moisture
SMO_pollutant_conc_subcatch = _output.SMO_pollutant_conc_subcatch
SMO_invert_depth = _output.SMO_invert_depth
SMO_hydraulic_head = _output.SMO_hydraulic_head
SMO_stored_ponded_volume = _output.SMO_stored_ponded_volume
SMO_lateral_inflow = _output.SMO_lateral_inflow
SMO_total_inflow = _output.SMO_total_inflow
SMO_flooding_losses = _output.SMO_flooding_losses
SMO_pollutant_conc_node = _output.SMO_pollutant_conc_node
SMO_flow_rate_link = _output.SMO_flow_rate_link
SMO_flow_depth = _output.SMO_flow_depth
SMO_flow_velocity = _output.SMO_flow_velocity
SMO_flow_volume = _output.SMO_flow_volume
SMO_capacity = _output.SMO_capacity
SMO_pollutant_conc_link = _output.SMO_pollutant_conc_link
SMO_air_temp = _output.SMO_air_temp
SMO_rainfall_system = _output.SMO_rainfall_system
SMO_snow_depth_system = _output.SMO_snow_depth_system
SMO_evap_infil_loss = _output.SMO_evap_infil_loss
SMO_runoff_flow = _output.SMO_runoff_flow
SMO_dry_weather_inflow = _output.SMO_dry_weather_inflow
SMO_groundwater_inflow = _output.SMO_groundwater_inflow
SMO_RDII_inflow = _output.SMO_RDII_inflow
SMO_direct_inflow = _output.SMO_direct_inflow
SMO_total_lateral_inflow = _output.SMO_total_lateral_inflow
SMO_flood_losses = _output.SMO_flood_losses
SMO_outfall_flows = _output.SMO_outfall_flows
SMO_volume_stored = _output.SMO_volume_stored
SMO_evap_rate = _output.SMO_evap_rate

def open(handle: "SMO_Handle", path: "char const *") -> "int":
    r"""
    open(handle, path) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    path: char const *

    """
    return _output.open(handle, path)

def getversion(handle: "SMO_Handle") -> "int *":
    r"""
    getversion(handle) -> int

    Parameters
    ----------
    p_handle: SMO_Handle

    """
    return _output.getversion(handle)

def getprojectsize(handle: "SMO_Handle") -> "int *":
    r"""
    getprojectsize(handle) -> int

    Parameters
    ----------
    p_handle: SMO_Handle

    """
    return _output.getprojectsize(handle)

def getunits(handle: "SMO_Handle") -> "int *":
    r"""
    getunits(handle) -> int

    Parameters
    ----------
    p_handle: SMO_Handle

    """
    return _output.getunits(handle)

def getstartdate(handle: "SMO_Handle") -> "double *":
    r"""
    getstartdate(handle) -> int

    Parameters
    ----------
    p_handle: SMO_Handle

    """
    return _output.getstartdate(handle)

def gettimes(handle: "SMO_Handle", code: "SMO_time") -> "int *":
    r"""
    gettimes(handle, code) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    code: enum SMO_time

    """
    return _output.gettimes(handle, code)

def getelementname(handle: "SMO_Handle", type: "SMO_elementType", elementIndex: "int") -> "int *":
    r"""
    getelementname(handle, type, elementIndex) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    type: enum SMO_elementType
    elementIndex: int

    """
    return _output.getelementname(handle, type, elementIndex)

def getsubcatchseries(handle: "SMO_Handle", subcatchIndex: "int", attr: "SMO_subcatchAttribute", startPeriod: "int", endPeriod: "int") -> "int *":
    r"""
    getsubcatchseries(handle, subcatchIndex, attr, startPeriod, endPeriod) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    subcatchIndex: int
    attr: enum SMO_subcatchAttribute
    startPeriod: int
    endPeriod: int

    """
    return _output.getsubcatchseries(handle, subcatchIndex, attr, startPeriod, endPeriod)

def getnodeseries(handle: "SMO_Handle", nodeIndex: "int", attr: "SMO_nodeAttribute", startPeriod: "int", endPeriod: "int") -> "int *":
    r"""
    getnodeseries(handle, nodeIndex, attr, startPeriod, endPeriod) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    nodeIndex: int
    attr: enum SMO_nodeAttribute
    startPeriod: int
    endPeriod: int

    """
    return _output.getnodeseries(handle, nodeIndex, attr, startPeriod, endPeriod)

def getlinkseries(handle: "SMO_Handle", linkIndex: "int", attr: "SMO_linkAttribute", startPeriod: "int", endPeriod: "int") -> "int *":
    r"""
    getlinkseries(handle, linkIndex, attr, startPeriod, endPeriod) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    linkIndex: int
    attr: enum SMO_linkAttribute
    startPeriod: int
    endPeriod: int

    """
    return _output.getlinkseries(handle, linkIndex, attr, startPeriod, endPeriod)

def getsystemseries(handle: "SMO_Handle", attr: "SMO_systemAttribute", startPeriod: "int", endPeriod: "int") -> "int *":
    r"""
    getsystemseries(handle, attr, startPeriod, endPeriod) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    attr: enum SMO_systemAttribute
    startPeriod: int
    endPeriod: int

    """
    return _output.getsystemseries(handle, attr, startPeriod, endPeriod)

def getsubcatchattribute(handle: "SMO_Handle", timeIndex: "int", attr: "SMO_subcatchAttribute") -> "int *":
    r"""
    getsubcatchattribute(handle, timeIndex, attr) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    timeIndex: int
    attr: enum SMO_subcatchAttribute

    """
    return _output.getsubcatchattribute(handle, timeIndex, attr)

def getnodeattribute(handle: "SMO_Handle", timeIndex: "int", attr: "SMO_nodeAttribute") -> "int *":
    r"""
    getnodeattribute(handle, timeIndex, attr) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    timeIndex: int
    attr: enum SMO_nodeAttribute

    """
    return _output.getnodeattribute(handle, timeIndex, attr)

def getlinkattribute(handle: "SMO_Handle", timeIndex: "int", attr: "SMO_linkAttribute") -> "int *":
    r"""
    getlinkattribute(handle, timeIndex, attr) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    timeIndex: int
    attr: enum SMO_linkAttribute

    """
    return _output.getlinkattribute(handle, timeIndex, attr)

def getsystemattribute(handle: "SMO_Handle", timeIndex: "int", attr: "SMO_systemAttribute") -> "int *":
    r"""
    getsystemattribute(handle, timeIndex, attr) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    timeIndex: int
    attr: enum SMO_systemAttribute

    """
    return _output.getsystemattribute(handle, timeIndex, attr)

def getsubcatchresult(handle: "SMO_Handle", timeIndex: "int", subcatchIndex: "int") -> "int *":
    r"""
    getsubcatchresult(handle, timeIndex, subcatchIndex) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    timeIndex: int
    subcatchIndex: int

    """
    return _output.getsubcatchresult(handle, timeIndex, subcatchIndex)

def getnoderesult(handle: "SMO_Handle", timeIndex: "int", nodeIndex: "int") -> "int *":
    r"""
    getnoderesult(handle, timeIndex, nodeIndex) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    timeIndex: int
    nodeIndex: int

    """
    return _output.getnoderesult(handle, timeIndex, nodeIndex)

def getlinkresult(handle: "SMO_Handle", timeIndex: "int", linkIndex: "int") -> "int *":
    r"""
    getlinkresult(handle, timeIndex, linkIndex) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    timeIndex: int
    linkIndex: int

    """
    return _output.getlinkresult(handle, timeIndex, linkIndex)

def getsystemresult(handle: "SMO_Handle", timeIndex: "int", dummyIndex: "int") -> "int *":
    r"""
    getsystemresult(handle, timeIndex, dummyIndex) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    timeIndex: int
    dummyIndex: int

    """
    return _output.getsystemresult(handle, timeIndex, dummyIndex)

def init() -> "SMO_Handle *":
    r"""init() -> int"""
    return _output.init()

def close(inout: "SMO_Handle *") -> "int":
    r"""
    close(inout) -> int

    Parameters
    ----------
    p_handle_inout: SMO_Handle *

    """
    return _output.close(inout)

def free(array: "void **") -> "void":
    r"""
    free(array)

    Parameters
    ----------
    array: void **

    """
    return _output.free(array)

def clearerror(handle: "SMO_Handle") -> "void":
    r"""
    clearerror(handle)

    Parameters
    ----------
    p_handle: SMO_Handle

    """
    return _output.clearerror(handle)

def checkerror(handle: "SMO_Handle", buffer: "char **") -> "int":
    r"""
    checkerror(handle, buffer) -> int

    Parameters
    ----------
    p_handle: SMO_Handle
    msg_buffer: char **

    """
    return _output.checkerror(handle, buffer)

import enum

import aenum

class UnitSystem(enum.Enum):
    US = SMO_US
    SI = SMO_SI

class FlowUnits(enum.Enum):
    CFS = SMO_CFS
    GPM = SMO_GPM
    MGD = SMO_MGD
    CMS = SMO_CMS
    LPS = SMO_LPS
    MLD = SMO_MLD

class ConcUnits(enum.Enum):
    MG = SMO_MG
    UG = SMO_UG
    COUNT = SMO_COUNT
    NONE = SMO_NONE

class ElementType(enum.IntEnum):
    SUBCATCH = SMO_subcatch
    NODE = SMO_node
    LINK = SMO_link
    POLLUT = SMO_pollut
    SYSTEM = SMO_sys

class Time(enum.Enum):
    REPORT_STEP = SMO_reportStep
    NUM_PERIODS = SMO_numPeriods

class SubcatchAttribute(aenum.Enum):
    RAINFALL = SMO_rainfall_subcatch
    SNOW_DEPTH = SMO_snow_depth_subcatch
    EVAP_LOSS = SMO_evap_loss
    INFIL_LOSS = SMO_infil_loss
    RUNOFF_RATE = SMO_runoff_rate
    GW_OUTFLOW_RATE = SMO_gwoutflow_rate
    GW_TABLE_ELEV = SMO_gwtable_elev
    SOIL_MOISTURE = SMO_soil_moisture
    POLLUT_CONC_0 = SMO_pollutant_conc_subcatch

class NodeAttribute(aenum.Enum):
    INVERT_DEPTH = SMO_invert_depth
    HYDRAULIC_HEAD = SMO_hydraulic_head
    PONDED_VOLUME = SMO_stored_ponded_volume
    LATERAL_INFLOW = SMO_lateral_inflow
    TOTAL_INFLOW = SMO_total_inflow
    FLOODING_LOSSES = SMO_flooding_losses
    POLLUT_CONC_0 = SMO_pollutant_conc_node

class LinkAttribute(aenum.Enum):
    FLOW_RATE = SMO_flow_rate_link
    FLOW_DEPTH = SMO_flow_depth
    FLOW_VELOCITY = SMO_flow_velocity
    FLOW_VOLUME = SMO_flow_volume
    CAPACITY = SMO_capacity
    POLLUT_CONC_0 = SMO_pollutant_conc_link

class SystemAttribute(enum.Enum):
    AIR_TEMP = SMO_air_temp
    RAINFALL = SMO_rainfall_system
    SNOW_DEPTH = SMO_snow_depth_system
    EVAP_INFIL_LOSS = SMO_evap_infil_loss
    RUNOFF_FLOW = SMO_runoff_flow
    DRY_WEATHER_INFLOW = SMO_dry_weather_inflow
    GW_INFLOW = SMO_groundwater_inflow
    RDII_INFLOW = SMO_RDII_inflow
    DIRECT_INFLOW = SMO_direct_inflow
    TOTAL_LATERAL_INFLOW = SMO_total_lateral_inflow
    FLOOD_LOSSES = SMO_flood_losses
    OUTFALL_FLOWS = SMO_outfall_flows
    VOLUME_STORED = SMO_volume_stored
    EVAP_RATE = SMO_evap_rate




